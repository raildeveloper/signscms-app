
subprojects {
   // apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'java'
    //apply plugin: 'jdepend'
    apply plugin: 'idea'

    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8 // Target JDK 8 only
    //sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
    configurations {
        // This configuration is used for JAR dependencies that are going to be
        // provided by the application container, and should not be made part
        // the standard distribution.
        provided
    }

    // Setup Checkstyle property to match the root of the project. The reason
    // for this name for the property is that it matches that used by the
    // Checkstyle Eclipse plugin.
    //checkstyle.configProperties.project_loc = projectDir
    // Set the location of the rules file to be the global one
    //checkstyle.configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    // Setup Checkstyle classpath to find all provided stuff
    //checkstyleMain.classpath += configurations.provided
    //checkstyleTest.classpath += configurations.provided

    repositories {

        mavenLocal()
        maven {

            url "http://maven.springframework.org/release"
            //url "https://repo.spring.io/release"
        }

        // Use the Maven Central repository; requires internet access.
        mavenCentral()
    }

    dependencies {
        // Any changes here will require updates to the jars specified in  
        
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        compile group: 'org.springframework', name: 'spring-webmvc', version: '4.3.7.RELEASE'
        compile group: 'org.springframework', name: 'spring-beans', version: '4.3.7.RELEASE'
        compile group: 'org.springframework', name: 'spring-context', version: '4.3.7.RELEASE'
        compile group: 'org.springframework', name: 'spring-core', version: '4.3.7.RELEASE'
        compile group: 'javax.servlet', name: 'jstl', version: '1.2'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.2'
        compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.2'
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
        compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.+'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.8'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'
        compile group: 'com.h2database', name: 'h2', version: '1.4.195'
        compile 'com.google.api-client:google-api-client:1.23.0'
        compile 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
        compile 'com.google.apis:google-api-services-gmail:v1-rev72-1.23.0'
        // https://mvnrepository.com/artifact/javax.mail/mail
        compile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
        compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'



        testCompile group: 'commons-collections', name: 'commons-collections', version: '20040616'
        testCompile group: 'commons-lang', name: 'commons-lang', version: '20030203.000129'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'info.cukes', name: 'cucumber-core', version: '1.2.5'
        testCompile group: 'info.cukes', name: 'cucumber-java8', version: '1.2.5'
        testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
        //testCompile group: 'org.mockito', name: 'mockito-all', version: '2.7.21'
        testCompile group: 'ognl', name: 'ognl', version: '3.2'
        testCompile group: 'org.unitils', name: 'unitils-core', version: '3.4.6'
        testCompile group: 'org.unitils', name: 'unitils-io', version: '3.4.6'
        testCompile group: 'org.unitils', name: 'unitils-mock', version: '3.4.6'

        ////////////////////////////////////////////////////////////////////////
        // Add Server Provided dependencies
        ////////////////////////////////////////////////////////////////////////



        ////////////////////////////////////////////////////////////////////////
        // Plugin dependencies
        ////////////////////////////////////////////////////////////////////////

        //checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: '5.7'
        //jdepend group: 'jdepend', name: 'jdepend', version: '2.9.1'
        //jdepend group: 'ant', name: 'ant-jdepend', version: '1.6.5'
    }

    // This trick adds the provided JAR files to to the classpath
    sourceSets {
        main { compileClasspath += configurations.provided }
        test { compileClasspath += configurations.provided }
    }

    test {
        classpath += configurations.provided
    }

    // After all checks are performed and passed, so extra checks.
    // Specifically:
    //   - The JDepend has not detected any circular dependencies. This is
    //     non-negotiable.
  /*  check.doLast {
        ['main', 'test'].each { f ->
            File cycles = file("${project.reporting.baseDir}/jdepend/${f}.xml")
            if (cycles.file) {
                def records = new XmlSlurper().parse(cycles)
                def num = records.Cycles.Package.size()
                if (0 < num) {
                    throw new GradleException("Found ${num} circular dependencies. See ${cycles} for details.")
                }
            }
        }
    }

*/
    // Ignore the /build directory which is created by Gradle
   /*
    eclipse.project.file.withXml {
        def node = it.asNode()

        // Add node to ignore Gradle build directory
        def filter = node.appendNode('filteredResources').appendNode('filter')
        filter.appendNode('id', '1347509495609')
        filter.appendNode('name')
        filter.appendNode('type', '30')
        def matcher = filter.appendNode('matcher')
        matcher.appendNode('id', 'org.eclipse.ui.ide.multiFilter')
        matcher.appendNode('arguments', '1.0-name-matches-false-false-build')

        // Add build command for Checkstyle
        def buildCommand = node.buildSpec[0].appendNode('buildCommand')
        buildCommand.appendNode('name', 'net.sf.eclipsecs.core.CheckstyleBuilder')
        buildCommand.appendNode('arguments')

        // Add nature for Checkstyle
        node.natures[0].appendNode('nature', 'net.sf.eclipsecs.core.CheckstyleNature')
    }
    */
}



project(':signscms-web') {
    apply plugin: 'war'

    dependencies {

    }

    war {
        archiveName 'SignageCMS.war'
    }
    // Bump the WebModule version
    eclipse.wtp.facet.file.withXml { provider ->
        def prov = provider.asNode()
        prov.installed.find { it.@facet == 'jst.web' }.@version = '3.0'
        //prov.appendNode('installed', [facet:'jst.jsf', version:'2.0'])
    }
}

project(':signscms-ear') {
    apply plugin: 'ear'

    dependencies {
        compile project(':signscms-web')

        deploy project(path: ':signscms-web', configuration: 'archives')
        //earlib group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
    }

    ear {
        appDirName 'src/main'
        deploymentDescriptor {
            initializeInOrder = true
            description = "Digital Signage Content Management System"
        }
    }
}

task clean {
    doLast {
        delete buildDir
    }
}
